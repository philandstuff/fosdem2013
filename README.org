#+TITLE FOSDEM 2013

* Nathan Harvey, Learning to Automate
** evolving towards automation:
   - just make it work
   - then write notes and store in server.txt
   - then publish those notes in wiki
   - then convert notes to scripts
   - then put scripts into source control
     - and not the =.bak= or =.<date>= kind
** new experiences when automating:
   - new terminology
   - new programming languages
   - new way of thinking about infrastructure
     - livestock, not pets
** challenges for educators
   - snowflakes -- everyone's infrastructure is different and under
     different constraints
   - deployment variation
     - loads and loads of options here
     - OS packages
     - .jars and .wars
     - capistrano
     - not to mention options for injecting environment-specific config
   - massively varying background of practitioners
     - sysadmins vs devs, broadly
     - but variation within and outside of these categories
   - rate of innovation of field
** Three archetypal learners
   - senior sysadmin
     - understands:
       - domain
       - tooling
     - doesn't understand
       - high-level abstraction
       - testing and TDD
     - needs examples and peer-based learning
   - "Trust fund" kid
     - has inherited an existing chef/puppet/cfengine codebase but
       doesn't understand it
     - value of automation lowered by lack of understanding
     - needs mentoring
   - the dev migrating to operations
     - understands:
       - abstraction
       - testing
     - doesn't understand:
       - OS-level concepts and techniques
     - willing to dig into ruby source code to understand things
     - needs domain expertise
   - Pattern here: massive variation in:
     - motivation
     - existing skills
** How can we help?
   - Community
     - conferences, usergroups, etc
   - support and mentoring for those around you
** finally: if you're using vagrant, use veewee!
* Brian Berry, Using Ruby testing frameworks for sanity
  - code at https://github.com/bryanwb/tk-demo
** standard shape:
   - appservers, loadbalancers, database nodes, database caches
** big data deathstar is coming
   - hadoop, zookeeper, apache mesos
** testing; two kinds
   - white box
   - black box
** you should use ruby
   - lightweight
   - libraries
   - rspec
   - easy to mock services (sinatra) (what does this mean?)
   - vagrant!
** minitest chef handler
** test kitchen
** Jamie CI aka Test-Kitchen 1.0
   - simple job:
     - define machines
     - provide virtualization backend
       - eg vagrant
   - define VMs using a single yaml file
   - supports librarian-chef and berkshelf
   - tests VMs concurrently
** BATS - Bash Automated Testing System
   - testing using bash, sort of
** "Smoke" tests
   - Don't need to test multiple OS versions
   - How to DRY up common driver configs?
   - Where to put IP config?
** logging
   - test-kitchen creates one log per VM
** wiring
   - hardcoding IP address in Vagrantfile?
   - assigning IP using Chef Server or Puppetmaster?
   - Presenting: Chef-Workflow
** Brian's super-cool Systems Management model
   - Finite State Machine (zookeeper) [wtf?]
   - orchestration (rake)
   - discovery (puppetdb/chef server)
   - provisioning (puppet/chef/cfengine)
   - machines (test-kitchen)
   - virt. drivers (vagrant)
** More awesome ruby libraries
   - Faraday
   - Sinatra
   - Rspec-dns
   - ruby-dns
** Summary
   - You can do a lot of basic integration testing _right now_ with
     vagrant + rake
   - concurrent VM task execution important (though controversial)
   - Need DSL for integration tests
   - Test-Kitchen alpha but exciting
   - There is gold in Chef-Workflow
   - We need public CI for chef cookbooks etc
** zookeeper
   - useful for maintaining dynamic state
   - master/slave
   - group membership
   - when I add an appserver, I don't want to wait for the next puppet
     run to have it added to the lb pool
     - zookeeper "basically" a key-value store with events and notifications
     - load balancer can listen for new appservers
** TODO Aside: Brians emacs for ruby:
   - Paredit?!
   - RBlock?
   - Ruby mode
* Pat Debois, spontaneous veewee talk
** vagrant
   - creates and destroys VMs very quickly
   - all starts from a base box
** veewee
   - https://github.com/jedi4ever/veewee
   - takes pain out of building vagrant boxes
     - also KVM, vmware
   - interact with those vms (up/destroy/halt/ssh)
   - export them: OVA for fusion, IMG for KVM, ovf for virtualbox
